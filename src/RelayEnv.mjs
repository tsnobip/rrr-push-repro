// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";

var preparedAssetsMap = {};

async function fetchFunction(operation, variables, _cacheConfig, param) {
  var headers = new Headers({
        "content-type": "application/json",
        accept: "application/json"
      });
  var resp = await fetch("/graphql", {
        method: "POST",
        body: Caml_option.some(JSON.stringify({
                  query: operation.text,
                  variables: variables
                })),
        headers: Caml_option.some(headers)
      });
  if (resp.ok) {
    return await resp.json();
  } else {
    return await Promise.reject(new Error("Request failed: " + resp.statusText));
  }
}

var environment = RescriptRelay.Environment.make(RelayRuntime.Network.create(fetchFunction, undefined), RescriptRelay.Store.make(new RelayRuntime.RecordSource(undefined), 10, undefined), undefined, undefined, undefined, undefined, undefined);

export {
  preparedAssetsMap ,
  fetchFunction ,
  environment ,
}
/* environment Not a pure module */
